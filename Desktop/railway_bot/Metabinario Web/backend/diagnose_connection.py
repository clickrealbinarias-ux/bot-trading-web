#!/usr/bin/env python3
"""
DIAGN√ìSTICO DE CONEXI√ìN EXNOVA
Diagnostica problemas de conexi√≥n con ExNova
"""

import sys
import os
import time
import logging

# Agregar el directorio exnovaapi al path
sys.path.append('/Users/rick/Desktop/BOTTELEGRAM/metabot_modificado/exnovaapi')

# Configuraci√≥n de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

def test_exnova_connection():
    """Probar conexi√≥n directa con ExNova"""
    try:
        logger.info("üîç Probando conexi√≥n directa con ExNova...")
        
        # Importar ExNovaAPI
        from exnovaapi.stable_api import ExnovaAPI
        
        # Crear instancia
        api = ExnovaAPI()
        
        # Probar login
        logger.info("üîê Probando login...")
        result = api.login("binariosector91@outlook.com", "Galileatrade27$")
        
        if result:
            logger.info("‚úÖ Login exitoso")
            
            # Probar obtener perfil
            logger.info("üë§ Obteniendo perfil...")
            profile = api.get_profile()
            if profile:
                logger.info(f"‚úÖ Perfil obtenido: {profile}")
            else:
                logger.warning("‚ö†Ô∏è No se pudo obtener perfil")
            
            # Probar cerrar sesi√≥n
            logger.info("üö™ Cerrando sesi√≥n...")
            api.logout()
            logger.info("‚úÖ Sesi√≥n cerrada")
            
            return True
        else:
            logger.error("‚ùå Login fall√≥")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Error en conexi√≥n ExNova: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_websocket_connection():
    """Probar conexi√≥n websocket"""
    try:
        logger.info("üîå Probando conexi√≥n websocket...")
        
        from exnovaapi.ws.client import WebsocketClient
        import asyncio
        
        # Crear cliente websocket
        client = WebsocketClient()
        
        # Probar m√©todos
        logger.info("üìã M√©todos disponibles en WebsocketClient:")
        methods = [m for m in dir(client) if not m.startswith('_')]
        for method in methods:
            logger.info(f"   - {method}")
        
        # Verificar firma de on_close
        import inspect
        sig = inspect.signature(client.on_close)
        logger.info(f"üîç Firma de on_close: {sig}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error en websocket: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_our_copytrading_api():
    """Probar OurCopyTradingAPI"""
    try:
        logger.info("ü§ñ Probando OurCopyTradingAPI...")
        
        # Importar desde el bot web
        sys.path.append('/Users/rick/Desktop/BOTTELEGRAM/metabot_modificado/Metabinario Web/backend')
        from our_copytrading_api import OurCopyTradingAPI
        
        # Crear instancia
        api = OurCopyTradingAPI()
        logger.info("‚úÖ OurCopyTradingAPI creada correctamente")
        
        # Probar agregar trader
        logger.info("üë§ Probando agregar trader...")
        result = api.add_trader_account(
            "binariosector91@outlook.com",
            "Galileatrade27$",
            "PRACTICE"
        )
        
        if result:
            logger.info("‚úÖ Trader agregado correctamente")
            
            # Obtener estado
            status = api.get_status()
            logger.info(f"üìä Estado: {status}")
            
            # Limpiar
            api.cleanup()
            logger.info("üßπ Limpieza completada")
            
            return True
        else:
            logger.error("‚ùå No se pudo agregar trader")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Error en OurCopyTradingAPI: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Funci√≥n principal de diagn√≥stico"""
    logger.info("üîç INICIANDO DIAGN√ìSTICO DE CONEXI√ìN EXNOVA")
    logger.info("=" * 60)
    
    # 1. Probar conexi√≥n directa
    logger.info("1Ô∏è‚É£ Probando conexi√≥n directa con ExNova...")
    direct_success = test_exnova_connection()
    
    # 2. Probar websocket
    logger.info("2Ô∏è‚É£ Probando conexi√≥n websocket...")
    ws_success = test_websocket_connection()
    
    # 3. Probar OurCopyTradingAPI
    logger.info("3Ô∏è‚É£ Probando OurCopyTradingAPI...")
    api_success = test_our_copytrading_api()
    
    # Resumen
    logger.info("=" * 60)
    logger.info("üìä RESUMEN DEL DIAGN√ìSTICO")
    logger.info(f"üîó Conexi√≥n directa ExNova: {'‚úÖ' if direct_success else '‚ùå'}")
    logger.info(f"üîå Conexi√≥n websocket: {'‚úÖ' if ws_success else '‚ùå'}")
    logger.info(f"ü§ñ OurCopyTradingAPI: {'‚úÖ' if api_success else '‚ùå'}")
    
    if all([direct_success, ws_success, api_success]):
        logger.info("üéâ TODOS LOS TESTS PASARON")
    else:
        logger.error("üí• ALGUNOS TESTS FALLARON")
    
    logger.info("=" * 60)

if __name__ == "__main__":
    main()

